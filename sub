import java.io.*;
import java.net.*;
import java.util.*;

public class TsvHttpServer {
    public static void main(String[] args) {
        int port = 8080; // 使用するポート番号
        System.out.println("サーバーをポート " + port + " で起動中...");

        try (ServerSocket serverSocket = new ServerSocket(port)) {
            while (true) {
                Socket clientSocket = serverSocket.accept();
                new Thread(new ClientHandler(clientSocket)).start();
            }
        } catch (IOException e) {
            System.err.println("エラー: サーバーの起動に失敗しました - " + e.getMessage());
        }
    }
}

/**
 * クライアントのリクエストを処理するスレッド
 */
class ClientHandler implements Runnable {
    private final Socket clientSocket;

    public ClientHandler(Socket socket) {
        this.clientSocket = socket;
    }

    @Override
    public void run() {
        try (
            InputStream input = clientSocket.getInputStream();
            OutputStream output = clientSocket.getOutputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(input, "UTF-8"));
            PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, "UTF-8"), true)
        ) {
            // HTTPリクエストのヘッダーを解析
            String line;
            boolean isPost = false;
            int contentLength = 0;

            while (!(line = reader.readLine()).isEmpty()) {
                if (line.startsWith("POST")) {
                    isPost = true;
                }
                if (line.startsWith("Content-Length:")) {
                    contentLength = Integer.parseInt(line.split(":")[1].trim());
                }
            }

            // POST以外は405エラーを返す
            if (!isPost) {
                sendResponse(writer, 405, "エラー: POSTリクエストのみ受け付けます");
                return;
            }

            // リクエストボディを読み取る
            char[] bodyChars = new char[contentLength];
            reader.read(bodyChars);
            String requestBody = new String(bodyChars);

            // TSVデータをJSONに変換
            List<Map<String, String>> jsonData;
            try {
                jsonData = TsvToJsonConverter.convertTsvToJson(new BufferedReader(new StringReader(requestBody)));
            } catch (IllegalArgumentException e) {
                sendResponse(writer, 400, "エラー: " + e.getMessage());
                return;
            }

            // JSONをレスポンスとして送信
            sendResponse(writer, 200, TsvToJsonConverter.listToJson(jsonData));
        } catch (IOException e) {
            System.err.println("エラー: クライアント処理中に問題発生 - " + e.getMessage());
        }
    }

    /**
     * HTTPレスポンスを送信する
     */
    private void sendResponse(PrintWriter writer, int statusCode, String response) {
        writer.println("HTTP/1.1 " + statusCode + " OK");
        writer.println("Content-Type: application/json; charset=UTF-8");
        writer.println("Content-Length: " + response.getBytes().length);
        writer.println();
        writer.println(response);
    }
}

/**
 * TSV → JSON 変換を行うクラス
 */
class TsvToJsonConverter {
    /**
     * TSVデータをJSONのリストに変換する
     */
    public static List<Map<String, String>> convertTsvToJson(BufferedReader br) throws IOException {
        List<Map<String, String>> jsonList = new ArrayList<>();

        String headerLine = br.readLine();
        if (headerLine == null) {
            throw new IllegalArgumentException("TSVデータが空です");
        }

        String[] headers = headerLine.split("\t");
        if (headers.length == 0) {
            throw new IllegalArgumentException("TSVのヘッダーが正しくありません");
        }

        String line;
        while ((line = br.readLine()) != null) {
            String[] values = line.split("\t");
            if (values.length > headers.length) {
                throw new IllegalArgumentException("データの列数がヘッダーより多い行があります: " + line);
            }

            Map<String, String> jsonObject = new LinkedHashMap<>();
            for (int i = 0; i < headers.length; i++) {
                jsonObject.put(headers[i], i < values.length ? values[i] : "");
            }
            jsonList.add(jsonObject);
        }

        return jsonList;
    }

    /**
     * List<Map> を JSON文字列に変換
     */
    public static String listToJson(List<Map<String, String>> list) {
        StringBuilder json = new StringBuilder();
        json.append("[\n");

        for (int i = 0; i < list.size(); i++) {
            json.append("  ").append(mapToJson(list.get(i)));
            if (i < list.size() - 1) {
                json.append(",");
            }
            json.append("\n");
        }

        json.append("]");
        return json.toString();
    }

    /**
     * Map を JSON文字列に変換
     */
    private static String mapToJson(Map<String, String> map) {
        StringBuilder json = new StringBuilder();
        json.append("{");

        int count = 0;
        for (Map.Entry<String, String> entry : map.entrySet()) {
            json.append("\"").append(escapeJson(entry.getKey())).append("\": ")
                .append("\"").append(escapeJson(entry.getValue())).append("\"");
            if (++count < map.size()) {
                json.append(", ");
            }
        }

        json.append("}");
        return json.toString();
    }

    /**
     * JSON文字列のエスケープ処理
     */
    private static String escapeJson(String str) {
        return str.replace("\\", "\\\\")
                  .replace("\"", "\\\"")
                  .replace("\n", "\\n")
                  .replace("\r", "\\r")
                  .replace("\t", "\\t");
    }
}